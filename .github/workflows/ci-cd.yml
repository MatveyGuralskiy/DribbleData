name: CI/CD Pipeline DribbleData

on:
  push:
    branches:
      - main
    paths:
      - 'IMAGE_VERSION'
  workflow_dispatch:

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.8
        
    - name: Set up AWS CLI
      uses: aws-actions/configure-aws-credentials@v3
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
    
    - name: Install dependencies for main microservice
      run: |
        cd Application/main
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Install dependencies for users microservice
      run: |
        cd Application/users
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Install dependencies for training microservice
      run: |
        cd Application/training
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Install dependencies for players microservice
      run: |
        cd Application/players
        python -m pip install --upgrade pip
        pip install -r requirements.txt
      
    - name: Create .env file
      run: |
        echo "SECRET_KEY=$(aws ssm get-parameter --name /dribble-data/SECRET_KEY --region $AWS_DEFAULT_REGION --query "Parameter.Value" --output text)" >> Application/.env
        echo "DAX_ENDPOINT=$(aws ssm get-parameter --name /dribble-data/DAX_ENDPOINT --region $AWS_DEFAULT_REGION --query "Parameter.Value" --output text)" >> Application/.env
        echo "SESSION_COOKIE_SECURE=$(aws ssm get-parameter --name /dribble-data/SESSION_COOKIE_SECURE --region $AWS_DEFAULT_REGION --query "Parameter.Value" --output text)" >> Application/.env
        echo "SESSION_COOKIE_HTTPONLY=$(aws ssm get-parameter --name /dribble-data/SESSION_COOKIE_HTTPONLY --region $AWS_DEFAULT_REGION --query "Parameter.Value" --output text)" >> Application/.env
        echo "SESSION_COOKIE_SAMESITE=$(aws ssm get-parameter --name /dribble-data/SESSION_COOKIE_SAMESITE --region $AWS_DEFAULT_REGION --query "Parameter.Value" --output text)" >> Application/.env
        echo "REPOSITORY_URI=$(aws ssm get-parameter --name /dribble-data/REPOSITORY_URI --region $AWS_DEFAULT_REGION --query "Parameter.Value" --output text)" >> Application/.env
        export AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
        export AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
      env:
        AWS_DEFAULT_REGION: us-east-1
      
    - name: Run unit tests
      run: |
        cd Application
        python -m unittest unit_tests.py

  build:
    runs-on: ubuntu-latest
    needs: setup
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      
    - name: Log in to Docker Hub
      run: echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin

    - name: Install Docker Compose
      run: |
        sudo curl -L "https://github.com/docker/compose/releases/download/v2.20.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose
        docker-compose --version

    - name: Build Docker Compose
      run: |
        cd Application
        docker-compose build
        
    - name: Log in to Docker Hub
      run: echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin

    - name: Build Docker images
      run: |
        cd Application
        docker-compose build

    - name: Read IMAGE_VERSION
      id: image_version
      run: echo "IMAGE_VERSION=$(cat IMAGE_VERSION)" >> $GITHUB_ENV
      
    - name: Tag Docker images
      run: |
        docker tag application-main matveyguralskiy/dribbledata_main:${{ env.IMAGE_VERSION }}
        docker tag application-users matveyguralskiy/dribbledata_users:${{ env.IMAGE_VERSION }}
        docker tag application-training matveyguralskiy/dribbledata_training:${{ env.IMAGE_VERSION }}
        docker tag application-players matveyguralskiy/dribbledata_players:${{ env.IMAGE_VERSION }}

    - name: Push Docker images to Docker Hub
      run: |
        docker push matveyguralskiy/dribbledata_main:${{ env.IMAGE_VERSION }}
        docker push matveyguralskiy/dribbledata_users:${{ env.IMAGE_VERSION }}
        docker push matveyguralskiy/dribbledata_training:${{ env.IMAGE_VERSION }}
        docker push matveyguralskiy/dribbledata_players:${{ env.IMAGE_VERSION }}

    - name: Clean up local Docker images
      run: |
        docker system prune -a -f

  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      
    - name: Install Trivy
      run: |
        sudo apt-get install wget apt-transport-https gnupg lsb-release -y
        wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
        echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
        sudo apt-get update -y
        sudo apt-get install trivy -y

    - name: Scan Docker images with Trivy
      run: |
        trivy image --scanners vuln matveyguralskiy/dribbledata_main:${{ env.IMAGE_VERSION }} --format json --output main_image_scan_results.json
        trivy image --scanners vuln matveyguralskiy/dribbledata_users:${{ env.IMAGE_VERSION }} --format json --output users_image_scan_results.json
        trivy image --scanners vuln matveyguralskiy/dribbledata_training:${{ env.IMAGE_VERSION }} --format json --output training_image_scan_results.json
        trivy image --scanners vuln matveyguralskiy/dribbledata_players:${{ env.IMAGE_VERSION }} --format json --output players_image_scan_results.json

    - name: Check scan results for multiple critical vulnerabilities
      run: |
        check_critical_vulns() {
          local file=$1
          local count=$(jq '[.Results[].Vulnerabilities[] | select(.Severity == "CRITICAL")] | length' "$file")
          if [ "$count" -gt 1 ]; then
            echo "Found critical vulnerability in $file"
            exit 1
          fi
        }

        check_critical_vulns main_image_scan_results.json
        check_critical_vulns users_image_scan_results.json        
        check_critical_vulns training_image_scan_results.json
        check_critical_vulns players_image_scan_results.json

    - name: Run Docker Compose tests
      run: |
        cd Docker
        docker-compose -f docker-compose.test.yml up -d
        echo "Docker Compose finished testing"
        docker-compose -f docker-compose.test.yml down
