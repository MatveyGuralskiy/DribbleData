name: Deployment

on:
  push:
    branches:
      - main

jobs:
  deployment:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up AWS CLI
      uses: aws-actions/configure-aws-credentials@v3
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Create .env file
      run: |
        echo "SECRET_KEY=$(aws ssm get-parameter --name /dribble-data/SECRET_KEY --region $AWS_DEFAULT_REGION --query "Parameter.Value" --output text)" >> Application/.env
        echo "DAX_ENDPOINT=$(aws ssm get-parameter --name /dribble-data/DAX_ENDPOINT --region $AWS_DEFAULT_REGION --query "Parameter.Value" --output text)" >> Application/.env
        echo "SESSION_COOKIE_SECURE=$(aws ssm get-parameter --name /dribble-data/SESSION_COOKIE_SECURE --region $AWS_DEFAULT_REGION --query "Parameter.Value" --output text)" >> Application/.env
        echo "SESSION_COOKIE_HTTPONLY=$(aws ssm get-parameter --name /dribble-data/SESSION_COOKIE_HTTPONLY --region $AWS_DEFAULT_REGION --query "Parameter.Value" --output text)" >> Application/.env
        echo "SESSION_COOKIE_SAMESITE=$(aws ssm get-parameter --name /dribble-data/SESSION_COOKIE_SAMESITE --region $AWS_DEFAULT_REGION --query "Parameter.Value" --output text)" >> Application/.env
        echo "REPOSITORY_URI=$(aws ssm get-parameter --name /dribble-data/REPOSITORY_URI --region $AWS_DEFAULT_REGION --query "Parameter.Value" --output text)" >> Application/.env
        export AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
        export AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
      env:
        AWS_DEFAULT_REGION: us-east-1

    - name: Install kubectl
      run: |
        curl -LO "https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl"
        chmod +x ./kubectl
        sudo mv ./kubectl /usr/local/bin/kubectl
        kubectl version --client

    - name: Install Helm
      run: |
        curl -LO https://get.helm.sh/helm-v3.12.0-linux-amd64.tar.gz
        tar -zxvf helm-v3.12.0-linux-amd64.tar.gz
        sudo mv linux-amd64/helm /usr/local/bin/helm
        helm version

    - name: Install eksctl
      run: |
        curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
        sudo mv /tmp/eksctl /usr/local/bin
        eksctl version

    - name: Read IMAGE_VERSION
      id: image_version
      run: echo "IMAGE_VERSION=$(cat IMAGE_VERSION)" >> $GITHUB_ENV

    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --name EKS-Development --region us-east-1

    - name: Associate IAM OIDC provider
      run: |
        eksctl utils associate-iam-oidc-provider --region=us-east-1 --cluster=EKS-Development --approve

    - name: Install My IAM JSON Policy from directory Policy
      run: |
        cd Kubernetes/Policy
        
        POLICY_NAME="AWSLoadBalancerControllerIAMPolicy"
        
        POLICY_ARN=$(aws iam list-policies --query "Policies[?PolicyName=='${POLICY_NAME}'].Arn" --output text)
        if [ "$POLICY_ARN" != "None" ]; then
          echo "Policy '$POLICY_NAME' already exists. Skipping creation."
        else
          echo "Creating new IAM policy: $POLICY_NAME"
          aws iam create-policy \
            --policy-name $POLICY_NAME \
            --policy-document file://alb_controller_iam_policy.json
        fi

    - name: Check and Create IAM Service Account
      run: |
        SERVICE_ACCOUNT_NAME="aws-load-balancer-controller"
        NAMESPACE="kube-system"
        CLUSTER_NAME="EKS-Development"
        
        # Check if the service account already exists
        if kubectl get serviceaccount $SERVICE_ACCOUNT_NAME -n $NAMESPACE > /dev/null 2>&1; then
          echo "Service account $SERVICE_ACCOUNT_NAME already exists in namespace $NAMESPACE."
        else
          echo "Service account $SERVICE_ACCOUNT_NAME does not exist. Creating it now."
          eksctl create iamserviceaccount \
            --cluster=$CLUSTER_NAME \
            --namespace=$NAMESPACE \
            --name=$SERVICE_ACCOUNT_NAME \
            --attach-policy-arn=arn:aws:iam::381491938951:policy/AWSLoadBalancerControllerIAMPolicy \
            --approve
        fi

    - name: Add EKS Helm repo
      run: |
        helm repo add eks https://aws.github.io/eks-charts
        helm repo update
        
    - name: Describe VPC ID
      id: vpc
      run: |
        VPC_ID=$(aws eks describe-cluster --name EKS-Development --query "cluster.resourcesVpcConfig.vpcId" --output text)
        echo "::set-output name=vpc_id::$VPC_ID"
    
    - name: Install or Upgrade AWS Load Balancer Controller
      run: |
        if helm list -n kube-system | grep -q "aws-load-balancer-controller"; then
          echo "Upgrading existing AWS Load Balancer Controller..."
          helm upgrade aws-load-balancer-controller eks/aws-load-balancer-controller \
            -n kube-system \
            --set clusterName=EKS-Development \
            --set serviceAccount.create=false \
            --set region=us-east-1 \
            --set vpcId=${{ steps.vpc.outputs.vpc_id }} \
            --set serviceAccount.name=aws-load-balancer-controller
        else
          echo "Installing new AWS Load Balancer Controller..."
          helm install aws-load-balancer-controller eks/aws-load-balancer-controller \
            -n kube-system \
            --set clusterName=EKS-Development \
            --set serviceAccount.create=false \
            --set region=us-east-1 \
            --set vpcId=${{ steps.vpc.outputs.vpc_id }} \
            --set serviceAccount.name=aws-load-balancer-controller
        fi
        
    - name: Wait for AWS Load Balancer Controller
      run: |
        timeout=60
        start_time=$(date +%s)
        while true; do
          current_time=$(date +%s)
          elapsed_time=$((current_time - start_time))
          if kubectl get deployment aws-load-balancer-controller -n kube-system | grep -q '2/2'; then
            echo "AWS Load Balancer Controller deployment is available."
            exit 0
          elif [ $elapsed_time -ge $timeout ]; then
            echo "AWS Load Balancer Controller failed to become available within timeout period."
            exit 1
          else
            echo "Waiting for AWS Load Balancer Controller deployment to be available..."
            sleep 30
          fi
        done
    
    - name: Verify AWS Load Balancer Controller Deployment
      run: |
        kubectl get deployment aws-load-balancer-controller -n kube-system
        kubectl get pods -n kube-system
    
    - name: Create Namespace
      run: |
        if ! kubectl get namespace dribbledata-project > /dev/null 2>&1; then
          kubectl create namespace dribbledata-project
        else
          echo "Namespace 'dribbledata-project' already exists"
        fi

    - name: Check and Create Kubernetes Secrets
      id: check-secrets
      run: |
        SECRET_NAMES=("SECRET_KEY" "DAX_ENDPOINT" "SESSION_COOKIE_SECURE" "SESSION_COOKIE_HTTPONLY" "SESSION_COOKIE_SAMESITE" "REPOSITORY_URI")
        EXISTING_SECRETS=$(kubectl get secret -n dribbledata-project -o jsonpath="{.items[*].metadata.name}")

        for SECRET_NAME in "${SECRET_NAMES[@]}"; do
          if [[ "$EXISTING_SECRETS" == *"$SECRET_NAME"* ]]; then
            echo "Secret $SECRET_NAME already exists"
          else
            echo "Secret $SECRET_NAME does not exist"
            echo "CREATE_SECRET_$SECRET_NAME=true" >> $GITHUB_ENV
          fi
        done

    - name: Create Kubernetes Secrets
      if: env.CREATE_SECRET_SECRET_KEY == 'true' || env.CREATE_SECRET_DAX_ENDPOINT == 'true' || env.CREATE_SECRET_SESSION_COOKIE_SECURE == 'true' || env.CREATE_SECRET_SESSION_COOKIE_HTTPONLY == 'true' || env.CREATE_SECRET_SESSION_COOKIE_SAMESITE == 'true' || env.CREATE_SECRET_REPOSITORY_URI == 'true'
      run: |
        kubectl create secret generic dribbledata-secrets \
          --from-literal=SECRET_KEY=${{ secrets.SECRET_KEY }} \
          --from-literal=DAX_ENDPOINT=${{ secrets.DAX_ENDPOINT }} \
          --from-literal=SESSION_COOKIE_SECURE=${{ secrets.SESSION_COOKIE_SECURE }} \
          --from-literal=SESSION_COOKIE_HTTPONLY=${{ secrets.SESSION_COOKIE_HTTPONLY }} \
          --from-literal=SESSION_COOKIE_SAMESITE=${{ secrets.SESSION_COOKIE_SAMESITE }} \
          --from-literal=REPOSITORY_URI=${{ secrets.REPOSITORY_URI }} \
          --namespace dribbledata-project
    
    - name: Install or Upgrade DribbleData Helm Chart
      run: |
        cd Kubernetes/Helm
        if helm list -n dribbledata-project | grep -q "dribbledata-release"; then
          echo "Upgrading existing Helm release 'dribbledata-release'..."
          helm upgrade dribbledata-release . \
            --namespace dribbledata-project \
            --set images.main=${{ env.IMAGE_VERSION }} \
            --set images.users=${{ env.IMAGE_VERSION }} \
            --set images.training=${{ env.IMAGE_VERSION }} \
            --set images.players=${{ env.IMAGE_VERSION }} \
            --values values.yaml
        else
          echo "Installing new Helm release 'dribbledata-release'..."
          helm install dribbledata-release . \
            --namespace dribbledata-project \
            --set images.main=${{ env.IMAGE_VERSION }} \
            --set images.users=${{ env.IMAGE_VERSION }} \
            --set images.training=${{ env.IMAGE_VERSION }} \
            --set images.players=${{ env.IMAGE_VERSION }} \
            --values values.yaml
        fi  
    
    - name: Verify Helm Releases
      run: |
        helm list --namespace dribbledata-project
        kubectl get deployments --namespace dribbledata-project
        kubectl get services --namespace dribbledata-project
        kubectl get pods --namespace dribbledata-project
        kubectl get ingress --namespace dribbledata-project
