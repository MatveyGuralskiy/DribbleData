name: CI/CD Pipeline DribbleData

on:
  push:
    branches:
      - main
    paths:
      - 'IMAGE_VERSION'
  workflow_dispatch:

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        token: ${{ secrets.MY_GITHUB_TOKEN }}

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.8
        
    - name: Set up AWS CLI
      uses: aws-actions/configure-aws-credentials@v3
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
    
    - name: Install dependencies for main microservice
      run: |
        cd Application/main
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Install dependencies for users microservice
      run: |
        cd Application/users
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Install dependencies for training microservice
      run: |
        cd Application/training
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Install dependencies for players microservice
      run: |
        cd Application/players
        python -m pip install --upgrade pip
        pip install -r requirements.txt
      
    - name: Create .env file
      run: |
        echo "SECRET_KEY=$(aws ssm get-parameter --name /dribble-data/SECRET_KEY --region $AWS_DEFAULT_REGION --query 'Parameter.Value' --output text)" >> Application/.env
        echo "SESSION_COOKIE_SECURE=$(aws ssm get-parameter --name /dribble-data/SESSION_COOKIE_SECURE --region $AWS_DEFAULT_REGION --query 'Parameter.Value' --output text)" >> Application/.env
        echo "SESSION_COOKIE_HTTPONLY=$(aws ssm get-parameter --name /dribble-data/SESSION_COOKIE_HTTPONLY --region $AWS_DEFAULT_REGION --query 'Parameter.Value' --output text)" >> Application/.env
        echo "SESSION_COOKIE_SAMESITE=$(aws ssm get-parameter --name /dribble-data/SESSION_COOKIE_SAMESITE --region $AWS_DEFAULT_REGION --query 'Parameter.Value' --output text)" >> Application/.env
        echo "BASE_URL_SERVICE_1=$(aws ssm get-parameter --name /dribble-data/BASE_URL_SERVICE_1 --region $AWS_DEFAULT_REGION --query 'Parameter.Value' --output text)" >> Application/.env
        echo "BASE_URL_SERVICE_2=$(aws ssm get-parameter --name /dribble-data/BASE_URL_SERVICE_2 --region $AWS_DEFAULT_REGION --query 'Parameter.Value' --output text)" >> Application/.env
        echo "BASE_URL_SERVICE_3=$(aws ssm get-parameter --name /dribble-data/BASE_URL_SERVICE_3 --region $AWS_DEFAULT_REGION --query 'Parameter.Value' --output text)" >> Application/.env
        echo "BASE_URL_SERVICE_4=$(aws ssm get-parameter --name /dribble-data/BASE_URL_SERVICE_4 --region $AWS_DEFAULT_REGION --query 'Parameter.Value' --output text)" >> Application/.env
      env:
        AWS_DEFAULT_REGION: us-east-1
      
    - name: Run unit tests
      run: |
        cd Application
        python -m unittest unit_tests.py

    - name: Read IMAGE_VERSION
      id: image_version
      run: echo "IMAGE_VERSION=$(cat IMAGE_VERSION)" >> $GITHUB_ENV

    - name: Update Chart.yaml with new version
      run: |
        VERSION=${{ env.IMAGE_VERSION }}
        sed -i "s/^appVersion: .*/appVersion: $VERSION/" Kubernetes/Helm/Chart.yaml

    - name: Update values.yaml with new version
      run: |
        VERSION=${{ env.IMAGE_VERSION }}
        sed -i "s/tag: V[0-9]\+\.[0-9]\+/tag: $VERSION/g" Kubernetes/Helm/values.yaml
        sed -i "s|image: matveyguralskiy/dribbledata_main:V[0-9]\+\.[0-9]\+|image: matveyguralskiy/dribbledata_main:$VERSION|g" Kubernetes/Helm/values.yaml
        sed -i "s|image: matveyguralskiy/dribbledata_users:V[0-9]\+\.[0-9]\+|image: matveyguralskiy/dribbledata_users:$VERSION|g" Kubernetes/Helm/values.yaml
        sed -i "s|image: matveyguralskiy/dribbledata_training:V[0-9]\+\.[0-9]\+|image: matveyguralskiy/dribbledata_training:$VERSION|g" Kubernetes/Helm/values.yaml
        sed -i "s|image: matveyguralskiy/dribbledata_players:V[0-9]\+\.[0-9]\+|image: matveyguralskiy/dribbledata_players:$VERSION|g" Kubernetes/Helm/values.yaml

    - name: Commit and push changes
      run: |
        git config --global user.name "github-actions"
        git config --global user.email "github-actions@github.com"
        git add Kubernetes/Helm/Chart.yaml Kubernetes/Helm/values.yaml
        git commit -m "Update version to ${{ env.IMAGE_VERSION }}"
        git push

  build-push:
    runs-on: ubuntu-latest
    needs: setup
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up AWS CLI
      uses: aws-actions/configure-aws-credentials@v3
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Create .env file
      run: |
        echo "SECRET_KEY=$(aws ssm get-parameter --name /dribble-data/SECRET_KEY --region $AWS_DEFAULT_REGION --query 'Parameter.Value' --output text)" >> Application/.env
        echo "SESSION_COOKIE_SECURE=$(aws ssm get-parameter --name /dribble-data/SESSION_COOKIE_SECURE --region $AWS_DEFAULT_REGION --query 'Parameter.Value' --output text)" >> Application/.env
        echo "SESSION_COOKIE_HTTPONLY=$(aws ssm get-parameter --name /dribble-data/SESSION_COOKIE_HTTPONLY --region $AWS_DEFAULT_REGION --query 'Parameter.Value' --output text)" >> Application/.env
        echo "SESSION_COOKIE_SAMESITE=$(aws ssm get-parameter --name /dribble-data/SESSION_COOKIE_SAMESITE --region $AWS_DEFAULT_REGION --query 'Parameter.Value' --output text)" >> Application/.env
        echo "BASE_URL_SERVICE_1=$(aws ssm get-parameter --name /dribble-data/BASE_URL_SERVICE_1 --region $AWS_DEFAULT_REGION --query 'Parameter.Value' --output text)" >> Application/.env
        echo "BASE_URL_SERVICE_2=$(aws ssm get-parameter --name /dribble-data/BASE_URL_SERVICE_2 --region $AWS_DEFAULT_REGION --query 'Parameter.Value' --output text)" >> Application/.env
        echo "BASE_URL_SERVICE_3=$(aws ssm get-parameter --name /dribble-data/BASE_URL_SERVICE_3 --region $AWS_DEFAULT_REGION --query 'Parameter.Value' --output text)" >> Application/.env
        echo "BASE_URL_SERVICE_4=$(aws ssm get-parameter --name /dribble-data/BASE_URL_SERVICE_4 --region $AWS_DEFAULT_REGION --query 'Parameter.Value' --output text)" >> Application/.env
      env:
        AWS_DEFAULT_REGION: us-east-1
      
    - name: Log in to Docker Hub
      run: echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin

    - name: Install Docker Compose
      run: |
        sudo curl -L "https://github.com/docker/compose/releases/download/v2.20.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose
        docker-compose --version

    - name: Build Docker Compose
      run: |
        cd Application
        docker-compose build

    - name: Read IMAGE_VERSION
      id: image_version
      run: echo "IMAGE_VERSION=$(cat IMAGE_VERSION)" >> $GITHUB_ENV
      
    - name: Tag Docker images
      run: |
        docker tag application-main matveyguralskiy/dribbledata_main:${{ env.IMAGE_VERSION }}
        docker tag application-users matveyguralskiy/dribbledata_users:${{ env.IMAGE_VERSION }}
        docker tag application-training matveyguralskiy/dribbledata_training:${{ env.IMAGE_VERSION }}
        docker tag application-players matveyguralskiy/dribbledata_players:${{ env.IMAGE_VERSION }}

    - name: Push Docker images to Docker Hub
      run: |
        docker push matveyguralskiy/dribbledata_main:${{ env.IMAGE_VERSION }}
        docker push matveyguralskiy/dribbledata_users:${{ env.IMAGE_VERSION }}
        docker push matveyguralskiy/dribbledata_training:${{ env.IMAGE_VERSION }}
        docker push matveyguralskiy/dribbledata_players:${{ env.IMAGE_VERSION }}

    - name: Clean up local Docker images
      run: |
        docker system prune -a -f

  test:
    runs-on: ubuntu-latest
    needs: build-push
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      
    - name: Install Trivy
      run: |
        sudo apt-get install wget apt-transport-https gnupg lsb-release -y
        wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
        echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
        sudo apt-get update -y
        sudo apt-get install trivy -y

    - name: Read IMAGE_VERSION
      id: image_version
      run: echo "IMAGE_VERSION=$(cat IMAGE_VERSION)" >> $GITHUB_ENV

    - name: Scan Docker images with Trivy
      run: |
        trivy image --scanners vuln matveyguralskiy/dribbledata_main:${{ env.IMAGE_VERSION }} --format json --output main_image_scan_results.json
        trivy image --scanners vuln matveyguralskiy/dribbledata_users:${{ env.IMAGE_VERSION }} --format json --output users_image_scan_results.json
        trivy image --scanners vuln matveyguralskiy/dribbledata_training:${{ env.IMAGE_VERSION }} --format json --output training_image_scan_results.json
        trivy image --scanners vuln matveyguralskiy/dribbledata_players:${{ env.IMAGE_VERSION }} --format json --output players_image_scan_results.json

    - name: Check scan results for multiple critical vulnerabilities
      run: |
        check_critical_vulns() {
          local file=$1
          local count=$(jq '[.Results[].Vulnerabilities[] | select(.Severity == "CRITICAL")] | length' "$file")
          if [ "$count" -gt 1 ]; then
            echo "Found critical vulnerability in $file"
            exit 1
          fi
        }

        check_critical_vulns main_image_scan_results.json
        check_critical_vulns users_image_scan_results.json        
        check_critical_vulns training_image_scan_results.json
        check_critical_vulns players_image_scan_results.json

    - name: Install Docker Compose
      run: |
        sudo curl -L "https://github.com/docker/compose/releases/download/v2.20.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose
        docker-compose --version

    - name: Run Docker Compose tests
      run: |
        cd Docker
        docker-compose -f docker-compose.test.yml up -d
        echo "Docker Compose finished testing"
        docker-compose -f docker-compose.test.yml down
  deployment:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up AWS CLI
      uses: aws-actions/configure-aws-credentials@v3
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Install kubectl
      run: |
        curl -LO "https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl"
        chmod +x ./kubectl
        sudo mv ./kubectl /usr/local/bin/kubectl
        kubectl version --client

    - name: Install Helm
      run: |
        curl -LO https://get.helm.sh/helm-v3.12.0-linux-amd64.tar.gz
        tar -zxvf helm-v3.12.0-linux-amd64.tar.gz
        sudo mv linux-amd64/helm /usr/local/bin/helm
        helm version

    - name: Install eksctl
      run: |
        curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
        sudo mv /tmp/eksctl /usr/local/bin
        eksctl version

    - name: Read IMAGE_VERSION
      id: image_version
      run: echo "IMAGE_VERSION=$(cat IMAGE_VERSION)" >> $GITHUB_ENV

    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --name EKS-Development --region us-east-1

    - name: Associate IAM OIDC provider
      run: |
        eksctl utils associate-iam-oidc-provider --region=us-east-1 --cluster=EKS-Development --approve

    - name: Install My IAM JSON Policy from directory Policy
      run: |
        cd Kubernetes/Policy
        
        POLICY_NAME="AWSLoadBalancerControllerIAMPolicy"
        
        POLICY_ARN=$(aws iam list-policies --query "Policies[?PolicyName=='${POLICY_NAME}'].Arn" --output text)
        if [ "$POLICY_ARN" != "None" ]; then
          echo "Policy '$POLICY_NAME' already exists. Skipping creation."
        else
          echo "Creating new IAM policy: $POLICY_NAME"
          aws iam create-policy \
            --policy-name $POLICY_NAME \
            --policy-document file://alb_controller_iam_policy.json
        fi

    - name: Check and Create IAM Service Account
      run: |
        SERVICE_ACCOUNT_NAME="aws-load-balancer-controller"
        NAMESPACE="kube-system"
        CLUSTER_NAME="EKS-Development"
        
        # Check if the service account already exists
        if kubectl get serviceaccount $SERVICE_ACCOUNT_NAME -n $NAMESPACE > /dev/null 2>&1; then
          echo "Service account $SERVICE_ACCOUNT_NAME already exists in namespace $NAMESPACE."
        else
          echo "Service account $SERVICE_ACCOUNT_NAME does not exist. Creating it now."
          eksctl create iamserviceaccount \
            --cluster=$CLUSTER_NAME \
            --namespace=$NAMESPACE \
            --name=$SERVICE_ACCOUNT_NAME \
            --attach-policy-arn=arn:aws:iam::381491938951:policy/AWSLoadBalancerControllerIAMPolicy \
            --approve
        fi

    - name: Add EKS Helm repo
      run: |
        helm repo add eks https://aws.github.io/eks-charts
        helm repo update
        
    - name: Describe VPC ID
      id: vpc
      run: |
        VPC_ID=$(aws eks describe-cluster --name EKS-Development --query "cluster.resourcesVpcConfig.vpcId" --output text)
        echo "VPC_ID=$VPC_ID" >> $GITHUB_ENV
    
    - name: Install or Upgrade AWS Load Balancer Controller
      run: |
        if helm list -n kube-system | grep -q "aws-load-balancer-controller"; then
          echo "Upgrading existing AWS Load Balancer Controller..."
          helm upgrade aws-load-balancer-controller eks/aws-load-balancer-controller \
            -n kube-system \
            --set clusterName=EKS-Development \
            --set serviceAccount.create=false \
            --set region=us-east-1 \
            --set vpcId=${{ env.VPC_ID }} \
            --set serviceAccount.name=aws-load-balancer-controller
        else
          echo "Installing new AWS Load Balancer Controller..."
          helm install aws-load-balancer-controller eks/aws-load-balancer-controller \
            -n kube-system \
            --set clusterName=EKS-Development \
            --set serviceAccount.create=false \
            --set region=us-east-1 \
            --set vpcId=${{ env.VPC_ID }} \
            --set serviceAccount.name=aws-load-balancer-controller
        fi
        
    - name: Wait for AWS Load Balancer Controller
      run: |
        timeout=60
        start_time=$(date +%s)
        while true; do
          current_time=$(date +%s)
          elapsed_time=$((current_time - start_time))
          if kubectl get deployment aws-load-balancer-controller -n kube-system | grep -q '2/2'; then
            echo "AWS Load Balancer Controller deployment is available."
            exit 0
          elif [ $elapsed_time -ge $timeout ]; then
            echo "AWS Load Balancer Controller failed to become available within timeout period."
            exit 1
          else
            echo "Waiting for AWS Load Balancer Controller deployment to be available..."
            sleep 30
          fi
        done
    
    - name: Verify AWS Load Balancer Controller Deployment
      run: |
        kubectl get deployment aws-load-balancer-controller -n kube-system
        kubectl get pods -n kube-system
    
    - name: Create Namespace
      run: |
        if ! kubectl get namespace dribbledata-project > /dev/null 2>&1; then
          kubectl create namespace dribbledata-project
        else
          echo "Namespace 'dribbledata-project' already exists"
        fi

    - name: Create AWS Secrets for Cluster
      run: |
        # Check if the secret already exists
        if kubectl get secret aws-credentials --namespace dribbledata-project > /dev/null 2>&1; then
          echo "Secret 'aws-credentials' already exists."
        else
          # Create the secret if it does not exist
          kubectl create secret generic aws-credentials \
            --namespace dribbledata-project \
            --from-literal=access_key_id=${{ secrets.AWS_ACCESS_KEY_ID }} \
            --from-literal=secret_access_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}
          echo "Secret 'aws-credentials' created."
        fi

    - name: Generate and apply secrets.yaml
      run: |
        # Fetch parameters from SSM and decode Base64
        SECRET_KEY=$(aws ssm get-parameter --name /dribble-data/SECRET_KEY --region $AWS_DEFAULT_REGION --query 'Parameter.Value' --output text)
        SESSION_COOKIE_SECURE=$(aws ssm get-parameter --name /dribble-data/SESSION_COOKIE_SECURE --region $AWS_DEFAULT_REGION --query 'Parameter.Value' --output text)
        SESSION_COOKIE_HTTPONLY=$(aws ssm get-parameter --name /dribble-data/SESSION_COOKIE_HTTPONLY --region $AWS_DEFAULT_REGION --query 'Parameter.Value' --output text)
        SESSION_COOKIE_SAMESITE=$(aws ssm get-parameter --name /dribble-data/SESSION_COOKIE_SAMESITE --region $AWS_DEFAULT_REGION --query 'Parameter.Value' --output text)
        
        # Encode the parameters to Base64
        SECRET_KEY_BASE64=$(echo -n "$SECRET_KEY" | base64 | tr -d '\n')
        SESSION_COOKIE_SECURE_BASE64=$(echo -n "$SESSION_COOKIE_SECURE" | base64 | tr -d '\n')
        SESSION_COOKIE_HTTPONLY_BASE64=$(echo -n "$SESSION_COOKIE_HTTPONLY" | base64 | tr -d '\n')
        SESSION_COOKIE_SAMESITE_BASE64=$(echo -n "$SESSION_COOKIE_SAMESITE" | base64 | tr -d '\n')
    
        # Create secrets.yaml file
        echo "apiVersion: v1
        kind: Secret
        metadata:
          name: my-secrets
          namespace: dribbledata-project
        type: Opaque
        data:
          SECRET_KEY: $SECRET_KEY_BASE64
          SESSION_COOKIE_SECURE: $SESSION_COOKIE_SECURE_BASE64
          SESSION_COOKIE_HTTPONLY: $SESSION_COOKIE_HTTPONLY_BASE64
          SESSION_COOKIE_SAMESITE: $SESSION_COOKIE_SAMESITE_BASE64
        " > Kubernetes/Helm/secrets.yaml
    
        # Apply the secrets.yaml to the cluster
        kubectl apply -f Kubernetes/Helm/secrets.yaml --namespace dribbledata-project
    
    - name: Install or Upgrade DribbleData Helm Chart
      run: |
        cd Kubernetes/Helm
        if helm list -n dribbledata-project | grep -q "dribbledata-release"; then
          echo "Upgrading existing Helm release 'dribbledata-release'..."
          helm upgrade dribbledata-release . \
            --namespace dribbledata-project \
            --set images.main=${{ env.IMAGE_VERSION }} \
            --set images.users=${{ env.IMAGE_VERSION }} \
            --set images.training=${{ env.IMAGE_VERSION }} \
            --set images.players=${{ env.IMAGE_VERSION }} \
            --values values.yaml
        else
          echo "Installing new Helm release 'dribbledata-release'..."
          helm install dribbledata-release . \
            --namespace dribbledata-project \
            --set images.main=${{ env.IMAGE_VERSION }} \
            --set images.users=${{ env.IMAGE_VERSION }} \
            --set images.training=${{ env.IMAGE_VERSION }} \
            --set images.players=${{ env.IMAGE_VERSION }} \
            --values values.yaml
        fi  
    
    - name: Verify Helm Releases
      run: |
        helm list --namespace dribbledata-project
        kubectl get deployments --namespace dribbledata-project
        kubectl get services --namespace dribbledata-project
        kubectl get pods --namespace dribbledata-project
        kubectl get ingress --namespace dribbledata-project
